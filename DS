
import java.util.Arrays;
import java.util.NoSuchElementException;

public class PowerHeap {
    private double x;
    private int size;
    private int[] heapArray;

    
    public PowerHeap(double x, int capacity) {
        this.size = 0;
        heapArray = new int[capacity];
        this.x = x;
        Arrays.fill(heapArray, -1);
    }

    private int parent(int i) {
        return (i - 1) / 2;
    }

    private int leftChild(int i) {
        return 2 * i + 1;
    }

    private int rightChild(int i) {
        return 2 * i + 2;
    }

    public boolean isFull() {
        return size == heapArray.length;
    }

    public void insert(int value) {
        if (isFull()) {
            throw new NoSuchElementException("Heap is full, no space to insert new element.");
        } else {
            heapArray[size] = value;
            heapifyUp(size);
            size++;
        }
    }

    private void heapifyUp(int i) {
        int tmp = heapArray[i];
        while (i > 0 && tmp > heapArray[parent(i)]) {
            heapArray[i] = heapArray[parent(i)];
            i = parent(i);
        }
        heapArray[i] = tmp;
    }

    public int popMax() {
        if (size == 0) {
            throw new NoSuchElementException("Heap is empty, no element to pop.");
        }

        int maxItem = heapArray[0];
        heapArray[0] = heapArray[size - 1];
        heapArray[size - 1] = -1;
        size--;

        heapifyDown(0);

        return maxItem;
    }

    private void heapifyDown(int i) {
        int largest = i;
        int left = leftChild(i);
        int right = rightChild(i);

        if (left < size && heapArray[left] > heapArray[largest]) {
            largest = left;
        }

        if (right < size && heapArray[right] > heapArray[largest]) {
            largest = right;
        }

        if (largest != i) {
            int swap = heapArray[i];
            heapArray[i] = heapArray[largest];
            heapArray[largest] = swap;

            heapifyDown(largest);
        }
    }

    public void print() {
        for (int i = 0; i < size; i++) {
            System.out.print(heapArray[i]);
            if (i < size - 1) {
                System.out.print(", ");
            }
        }
        System.out.println();
    }

    public static void main(String[] args) {
        double x = 4;
        int capacity = 10; 

        PowerHeap heap = new PowerHeap(x, capacity);
        heap.insert(5);
        heap.insert(8);
        heap.insert(3);

        heap.print();

        int maxItem = heap.popMax();
        System.out.println("Max item: " + maxItem);

        heap.print();
    }
}
